|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Intro ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|

The point of this markup format is that indentation whitespace doesn't matter

And to be a combination of various markup things that i like from various
markup languages

This text is only structured so that a treesitter parser can parse it
It is not meant to be converted to html or something viewed ^[1]
It is a markup format *made* to be displayed inside neovim

|───────────────────────────────── The Spec ──────────────────────────────────|

There is no spec, because the point is that the text is freeform.
If you want a spec, the closest you're gonna get is this file, and `grammar.js`

|─────────────────────────────────── Syntax ──────────────────────────────────|

Whitespace at the start of a line is ignored
This way the user to format the text however they see fit

-------------------------------- Basic Markup ---------------------------------

== Word ==
    Any character(s) in the `Letter` unicode category seperated by
    other markup

== Non Word ==                                                       #non-word#
    Any character(s) *not* in the `letter` unicode category seperated by
    other markup

== Paragraph separator ==
    `\n\n`

== Line break ==
    `\n`

== Esc ==

    Any special character can be escaped with `\`

== Bold ==

    `*text*`

== Italic ==

    `(/text/)`

== Underline ==

    `_text_`

== Strikethrough ==

    `~text~` or `-text-`

== Highlight/marks ==

    `+this is a highlight+`

    >html
    <mark>this an equivelent highlight in html</mark>
    <

== Basic quotes ==

    `‘this is a quote’`

    Any puncutation in these unicode categories can be used:
        - `Initial_Punctuation` ∪ `「`
        - `Final_Punctuation` ∪ `」`
            - for some reason japanese quotes are not part of
              unicode punctuation

    Optionally, after the quote a `- author` may be given
    This may be seperated by any amount of whitespace.

    `~`, `—`, `–`, and `-` may be used as author markers
    *NOTE*: `-` only works on same line due to |lists|

== Box ==
    `[this is a box]`

    It has no syntatic meaning,
    and is only given meaning by a highligher or renderer if it wants to.

    For example, with my neovim treesitter highlights i have:
    - Checked list item
        `- [x]`
    - Unchecked list item
        `- [ ]`
    - Link label
        `[wikipedia]|https://wikipedia.org|`

----------------------------------- Anchors -----------------------------------

== Links ==

    `|the link|`

    `the link` can be
        - |Anchor|
        - |Header|
        - |Footnote|
        - `https?://`
        - path to a file

    also see |Box|

== Header ==

    H1: `=` text `=`
    H2: `==` text `==`
    H3: `===` text `===`
    .
    .
    .

    - The ending `=` are optional.
    - there can be as many `=` as you want.
        - this conflicts with the `=` |Dividers|, but i think it's fine


== Anchor ==
    An anchor can be any header OR, marked with `#anchor#`



== Footnote ==

    You can link to a footnote with `^[text]`, or `|text|` where `text` may be any text
    To create the actual footnote text, use

    >
    ^[1]:
        The footnote goes here
    <

    To link to a footnote do `^[1]`


--------------------------------- Extra Stuff ---------------------------------

== Dividers ==

    `=========`
    `---------`
    `++++++++`
    `________`
    `::::::::`
    `————————`
    `––––––––`
    `‗‗‗‗‗‗‗‗`
    `‾‾‾‾‾‾‾‾`
    `━━━━━━━━`
    `────────`
    `~~~~~~~~`

    A divider is only given syntatic meaning in order to encourage the use of them

    It really makes a document look nicer,
    and there's so many because im not sure which kind of dividers i like yet,
    and some divide more than others, eg: `---` is very "weak" compared to `:::`

    Spaces may be used in dividers.

    *NOTE*: there are characters that can be used on the ends of a divider:
    - right side
        - `<`
        - `├`
        - `┣`
    - left side
        - `>`
        - `┤`
        - `┫`
    - both
        - `|`

    In order to be classified as a divider,
    at least 3 of the same divider characters must appear in a row


== Unordered bullets ==                                                 #lists#

    `- top level`
        `- next level (interally this is still top level
          because whitespace is ignored)`

    The following bullets may also be used:
    `*`, `•`, `+`


== Ordered bullets ==

    `1. top level`
        `a. next level`
            `i. next level`

    `)` may also be used instead of `.`

    *NOTE*: The user is expected to number themselves

    *NOTE*:
        Any number of numbers are allowed,
        However, if non-numbers are used, only 1 can be used
        eg: `A.` is allowed but `AA.` is not


== Tables ==

    >markdown
    Column 1 | Column 2
    ---------|---------
    Data 1   | Data 2
    <

    Yeah uh, there is no table, it's too much effort,
    if you want a table, use a markdown block,
    or dont since it really doesn't matter that much

================================= Code Stuff ==================================


== Plain snippet ==
    `markup in here is ignored`

== Code snippet ==
    $python$
    "markup in here is also ignored, it's an inline version of the code block"
    $$

    *NOTE*:
        the language is optional,
        the user should set what the default language should be

    The point of this is that it can be $text$ inline $$,
    unlike |Code block|


== Code block ==
    >Language
    markup in here is also ignored
    <

    eg:
    >python
    print("Hello")
    <

    As many `>` can be used at the start as you like,
    as long as there is the same number of `<` at the end.

    This allows for nesting.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

^[1]:
    I have given in slightly,
    there is now a paragraph separator node which is `\n\n`
    and a line break node which is `\n`
    However this should also make writing queries easier so yeah
