|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Intro ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|

The point of this markup format is that indentation whitespace doesn't matter

And to be a combination of various markup things that i like from various
markup languages

This text is only structured so that a treesitter parser can parse it
It is not meant to be converted to html or something viewed
It is a markup format *made* to be displayed inside neovim

|───────────────────────────────── The Spec ──────────────────────────────────|

There is no spec, because the point is that the text is freeform.
If you want a spec, the closest you're gonna get is this file, and `grammar.js`

|─────────────────────────────────── Syntax ──────────────────────────────────|

Whitespace at the start of a line is ignored
This way the user to format the text however they see fit

-------------------------------- Basic Markup ---------------------------------

== Esc ==

    Any special character can be escaped with `\`

== Bold ==

    `*text*`

== Italic ==

    `(/text/)`

== Underline ==

    `_text_`

== Strikethrough ==

    `~text~` or `-text-`

== Highlight/marks ==

    `+this is a highlight+`

    >html
    <mark>this an equivelent highlight in html</mark>
    <

== Box ==
    `[this is a box]`
    It has no syntatic meaning,
    and is only given meaning by a highligher or renderer if it wants to.

    For example, with my neovim treesitter highlights i have:
    - Checked list item
        `- [x]`
    - Unchecked list item
        `- [ ]`
    - Link label
        `[wikipedia]|https://wikipedia.org|`

----------------------------------- Anchors -----------------------------------

== Links ==

    `|the link|`

    `the link` can be
        - |Anchor|
        - |Header|
        - |Footnote|
        - `https?://`
        - path to a file

    also see |Box|

== Header ==

    H1: = text =
    H2: == text ==
    H3: === text ===
    .
    .
    .

    - The ending `=` are optional.
    - there can be as many `=` as you want.
        - this conflicts with the `=` |Dividers|, but i think it's fine


== Anchor ==

    An anchor can be any header OR, marked with `#anchor#`


== Footnote ==

    You can link to a footnote with `^[text]`, or `|text|` where `text` may be any text
    To create the actual footnote text, use

    >
    ^[1]:
        The footnote goes here
    [/1]
    <

    To link to a footnote do `^[1]`


--------------------------------- Extra Stuff ---------------------------------

== Dividers ==

    `=========`
    `---------`
    `++++++++`
    `________`
    `::::::::`
    `————————`
    `––––––––`
    `‗‗‗‗‗‗‗‗`
    `‾‾‾‾‾‾‾‾`
    `━━━━━━━━`
    `────────`
    `~~~~~~~~`

    A divider is only given syntatic meaning in order to encourage the use of them

    It really makes a document look nicer,
    and there's so many because im not sure which kind of dividers i like yet,
    and some divide more than others, eg: `---` is very "weak" compared to `:::`

    Spaces may be used in dividers.

    NOTE: there are characters that can be used on the ends of a divider:
    - right side
        - `<`
        - `├`
        - `┣`
    - left side
        - `>`
        - `┤`
        - `┫`
    - both
        - `|`

== Unordered bullets ==

    `- top level`
        `- next level (interally this is still top level
          because whitespace is ignored)`
    `•` may also be used


== Ordered bullets ==

    `1. top level`
        `a. next level`
            `i. next level`

    *NOTE:* The user is expected to number themselves


== Tables ==

    >markdown
    Column 1 | Column 2
    ---------|---------
    Data 1   | Data 2
    <

    Yeah uh, there is no table, it's too much effort,
    if you want a table, use a markdown block,
    or dont since it really doesn't matter that much


================================= Code Stuff ==================================


== Code snippet ==
    `markup in here is ignored`


== Code block ==
    >Language
    markup in here is also ignored
    <

    eg:
    >python
    print("Hello")
    <

    As many `>` can be used at the start as you like,
    as long as there is the same number of `<` at the end.

    This allows for nesting.


== Metadata ==

    Should be at the top of the file, whitespace is critical
    Eventually i'd like to make a seperate parser,
    So that it doesn't need to be hardcoded in the mmfml grammar

    `>metadata`
    `Key: value`
    `<`

    This syntax is exactly the same as |Code block|
